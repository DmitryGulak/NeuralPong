webpackJsonp([1],{0:function(e,a){},"15dw":function(e,a){e.exports=[{tfOpName:"ConcatV2",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:-1,dlParamName:"axis",type:"number"}]},{tfOpName:"Concat",dlOpName:"concat",category:"slice_join",params:[{tfInputIndex:1,tfInputParamLength:1,dlParamName:"tensors",type:"tensors"},{tfInputIndex:0,dlParamName:"axis",type:"number"}]},{tfOpName:"GatherV2",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",dlOpName:"gather",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"indices",type:"tensor"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0},{tfParamName:"validate_indices",dlParamName:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"ReverseV2",dlOpName:"reverse",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"Slice",dlOpName:"slice",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"begin",type:"number[]"},{tfInputIndex:2,dlParamName:"size",type:"number[]"}]},{tfOpName:"StridedSlice",dlOpName:"stridedSlice",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"begin",type:"number[]"},{tfInputIndex:2,dlParamName:"end",type:"number[]"},{tfInputIndex:3,dlParamName:"strides",type:"number[]"},{tfParamName:"begin_mask",dlParamName:"beginMask",type:"number",defaultValue:0},{tfParamName:"end_mask",dlParamName:"endMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",dlOpName:"stack",category:"slice_join",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"},{tfParamName:"axis",dlParamName:"axis",type:"number",defaultValue:0}]},{tfOpName:"Tile",dlOpName:"tile",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"reps",type:"number[]"}]},{tfOpName:"Split",dlOpName:"split",category:"slice_join",params:[{tfInputIndex:0,dlParamName:"axis",type:"number",defaultValue:0},{tfInputIndex:1,dlParamName:"x",type:"tensor"},{tfParamName:"num_split",dlParamName:"numOrSizeSplits",type:"number",defaultValue:1}]}]},"1xb0":function(e,a){},"4zXq":function(e,a){e.exports=[{tfOpName:"LoopCond",dlOpName:"loopCond",category:"control",params:[{tfInputIndex:0,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Switch",dlOpName:"switch",category:"control",params:[{tfInputIndex:0,dlParamName:"data",type:"tensor"},{tfInputIndex:1,dlParamName:"pred",type:"tensor"}]},{tfOpName:"Merge",dlOpName:"merge",category:"control",params:[{tfInputIndex:0,tfInputParamLength:0,dlParamName:"tensors",type:"tensors"}]},{tfOpName:"Enter",dlOpName:"enter",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"frame_name",dlParamName:"frameName",type:"string"},{tfParamName:"is_constant",dlParamName:"isConstant",type:"bool"}]},{tfOpName:"Exit",dlOpName:"exit",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",dlOpName:"nextIteration",category:"control",params:[{tfInputIndex:0,dlParamName:"tensor",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},"9CGA":function(e,a){e.exports=[{tfOpName:"FusedBatchNorm",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",dlOpName:"batchNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"scale",type:"tensor"},{tfInputIndex:2,dlParamName:"offset",type:"tensor"},{tfInputIndex:3,dlParamName:"mean",type:"tensor"},{tfInputIndex:4,dlParamName:"variance",type:"tensor"},{tfParamName:"epsilon",dlParamName:"epsilon",type:"number",defaultValue:.001},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",dlOpName:"localResponseNormalization",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"depth_radius",dlParamName:"radius",type:"number",defaultValue:5},{tfParamName:"bias",dlParamName:"bias",type:"number",defaultValue:1},{tfParamName:"alpha",dlParamName:"alpha",type:"number",defaultValue:1},{tfParamName:"beta",dlParamName:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",dlOpName:"softmax",category:"normalization",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]}]},"9q2H":function(e,a){e.exports=[{tfOpName:"Fill",dlOpName:"fill",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfInputIndex:1,dlParamName:"value",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LinSpace",dlOpName:"linspace",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"num",type:"number"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",dlOpName:"oneHot",category:"creation",params:[{tfInputIndex:0,dlParamName:"indices",type:"tensor"},{tfInputIndex:1,dlParamName:"depth",type:"number"},{tfInputIndex:2,dlParamName:"onValue",type:"number",defaultValue:1},{tfInputIndex:3,dlParamName:"offValue",type:"number",defaultValue:0},{tfParamName:"axis",dlParamName:"axis",type:"number",notSupported:!0},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",dlOpName:"ones",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",dlOpName:"onesLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",dlOpName:"randomUniform",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"minval",dlParamName:"minval",type:"number",defaultValue:0},{tfParamName:"maxval",dlParamName:"maxval",type:"number",defaultValue:1},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"seed",dlParamName:"seed",type:"number",defaultValue:0},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",dlOpName:"range",category:"creation",params:[{tfInputIndex:0,dlParamName:"start",type:"number"},{tfInputIndex:1,dlParamName:"stop",type:"number"},{tfInputIndex:2,dlParamName:"step",type:"number",defaultValue:0},{tfParamName:"Tidx",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"truncatedNormal",dlOpName:"truncatedNormal",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"means",dlParamName:"mean",type:"number",defaultValue:0},{tfParamName:"stddev",dlParamName:"stdDev",type:"number",defaultValue:1},{tfParamName:"seed",dlParamName:"seed",type:"number"},{tfParamName:"seed2",dlParamName:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfParamName:"dtype",dlParamName:"dtype",type:"dtype"},{tfParamName:"T",dlParamName:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",dlOpName:"zeros",category:"creation",params:[{tfInputIndex:0,dlParamName:"shape",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",dlOpName:"zerosLike",category:"creation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype"}]}]},CI09:function(e,a){e.exports=[{tfOpName:"ResizeBilinear",dlOpName:"resizeBilinear",category:"image",params:[{tfInputIndex:0,dlParamName:"images",type:"tensor"},{tfInputIndex:1,dlParamName:"size",type:"number[]"},{tfParamName:"align_corners",dlParamName:"alignCorners",type:"bool"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",dlOpName:"resizeNearestNeighbor",category:"image",params:[{tfInputIndex:0,dlParamName:"images",type:"tensor"},{tfInputIndex:1,dlParamName:"size",type:"number[]"},{tfParamName:"align_corners",dlParamName:"alignCorners",type:"bool"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},DKym:function(e,a){e.exports=[{tfOpName:"Add",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BiasAdd",dlOpName:"add",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",dlOpName:"sub",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",dlOpName:"div",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",dlOpName:"mul",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",dlOpName:"maximum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Minimum",dlOpName:"minimum",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"}]},{tfOpName:"Pow",dlOpName:"pow",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",dlOpName:"squaredDifference",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",dlOpName:"mod",category:"arithmetic",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},FiE7:function(e,a){e.exports=[{tfOpName:"Equal",dlOpName:"equal",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",dlOpName:"notEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",dlOpName:"greater",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",dlOpName:"greaterEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",dlOpName:"less",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",dlOpName:"lessEqual",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",dlOpName:"logicalAnd",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",dlOpName:"logicalNot",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",dlOpName:"logicalOr",category:"logical",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",dlOpName:"where",category:"logical",params:[{tfInputIndex:0,dlParamName:"condition",type:"tensor"},{tfInputIndex:1,dlParamName:"a",type:"tensor"},{tfInputIndex:2,dlParamName:"b",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},HHgX:function(e,a){e.exports=[{tfOpName:"Cast",dlOpName:"cast",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"SrcT",dlParamName:"sdtype",type:"dtype",notSupported:!0},{tfParamName:"DstT",dlParamName:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",dlOpName:"expandDims",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfParamNameDeprecated:"dim",dlParamName:"axis",type:"number"}]},{tfOpName:"Pad",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfParamName:"constant_value",dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",dlOpName:"pad",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"padding",type:"number[]"},{tfInputIndex:2,dlParamName:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",dlOpName:"reshape",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"shape",type:"number[]"}]},{tfOpName:"Squeeze",dlOpName:"squeeze",category:"transformation",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"axis",tfParamNameDeprecated:"squeeze_dims",dlParamName:"axis",type:"number[]"}]}]},MHBT:function(e,a){e.exports=[{tfOpName:"Abs",dlOpName:"abs",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",dlOpName:"acos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",dlOpName:"asin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"atan",dlOpName:"atan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",dlOpName:"ceil",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"clip_value_min",dlParamName:"clipValueMin",type:"number"},{tfParamName:"clip_value_max",dlParamName:"clipValueMax",type:"number"}]},{tfOpName:"Cos",dlOpName:"cos",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",dlOpName:"cosh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",dlOpName:"elu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",dlOpName:"exp",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",dlOpName:"floor",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",dlOpName:"log",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",dlOpName:"neg",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",dlOpName:"relu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",dlOpName:"clipByValue",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{dlParamName:"clipValueMin",type:"number",defaultValue:0},{dlParamName:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",dlOpName:"selu",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",dlOpName:"sigmoid",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",dlOpName:"sin",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",dlOpName:"sinh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",dlOpName:"sqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",dlOpName:"rsqrt",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",dlOpName:"square",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",dlOpName:"tan",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",dlOpName:"tanh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",dlOpName:"sign",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",dlOpName:"round",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",dlOpName:"expm1",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",dlOpName:"log1p",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",dlOpName:"reciprocal",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",dlOpName:"reciprocal",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",dlOpName:"softplus",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",dlOpName:"asinh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",dlOpName:"acosh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",dlOpName:"atanh",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",dlOpName:"erf",category:"basic_math",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},NHnr:function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var r=t("7+uW"),m={render:function(){var e=this.$createElement,a=this._self._c||e;return a("div",{attrs:{id:"app"}},[a("router-view")],1)},staticRenderFns:[]};var n=t("VU/8")({name:"App"},m,!1,function(e){t("bNjZ")},null,null).exports,p=t("/ocq"),d=t("mvHQ"),o=t.n(d),s=t("Zx67"),i=t.n(s),l=t("zwoO"),u=t.n(l),N=t("Pf15"),y=t.n(N),f=t("Zrlr"),c=t.n(f),h=t("wxAW"),P=t.n(h),g=t("50uv"),I=t("ECDG");function x(e,a){var t=e-.5+Math.random()*(a-e+1);return 0===(t=Math.round(t))?x(e,a):t}var b=function(){function e(a){var t=this;c()(this,e),this.game=a,this.app=this.game.app,this.graphics=new g.Graphics,this.x=this.app.renderer.width/2,this.y=this.app.renderer.height/2,this.maxVectorY=20,this.radius=10,this.velocityX=10,this.velocityY=10,this.vectorX=this.velocityX,this.vectorY=this.velocityY,this.draw(),this.app.ticker.add(function(){return t.tick()}),this.reset()}return P()(e,[{key:"draw",value:function(){this.graphics.beginFill(161061273),this.graphics.drawCircle(0,0,this.radius),this.graphics.endFill(),this.object=new g.Sprite(this.graphics.generateCanvasTexture()),this.object.x=this.x,this.object.y=this.y,this.app.stage.addChild(this.object)}},{key:"updateVectors",value:function(e,a){e&&(this.vectorX=e),a&&(this.vectorY=a)}},{key:"conllisionCheck",value:function(){this.object.x+2*this.radius>this.app.renderer.width&&(this.game.player_one.agent.onLose(),this.game.player_two.agent.clearState()),this.object.x<0&&(this.game.player_two.agent.onLose(),this.game.player_one.agent.clearState()),this.object.y+2*this.radius>this.app.renderer.height&&this.updateVectors(null,-1*this.vectorY),this.object.y<0&&this.updateVectors(null,-1*this.vectorY)}},{key:"checkPlayerColision",value:function(){if("right"===this.game.b.rectangleCollision(this.object,this.game.player_one.object,!0)){this.game.player_one.agent.onWin(),this.game.player_two.agent.clearState();var e=2*this.game.player_one.vectorY-this.vectorY;e>this.maxVectorY&&(e=this.maxVectorY),e<-1*this.maxVectorY&&(e=-1*this.maxVectorY),this.object.x-=10,this.updateVectors(-1*this.vectorX,e)}}},{key:"checkPlayerTwoColision",value:function(){if("left"===this.game.b.rectangleCollision(this.object,this.game.player_two.object)){this.game.player_two.agent.onWin(),this.game.player_one.agent.clearState();var e=2*this.game.player_two.vectorY-this.vectorY;e>this.maxVectorY&&(e=this.maxVectorY),e<-1*this.maxVectorY&&(e=-1*this.maxVectorY),this.object.x+=10,this.updateVectors(-1*this.vectorX,e)}}},{key:"tick",value:function(){this.conllisionCheck(),this.checkPlayerColision(),this.checkPlayerTwoColision(),this.object.x+=this.vectorX,this.object.y+=this.vectorY}},{key:"reset",value:function(){this.velocityX=x(5,10),this.velocityY=x(5,10),this.object.x=this.app.renderer.width/2,this.object.y=this.app.renderer.height/2,this.vectorX=this.velocityX*x(-1,1),this.vectorY=this.velocityY*x(-1,1)}}]),e}(),O=function(e){function a(){return c()(this,a),u()(this,(a.__proto__||i()(a)).apply(this,arguments))}return y()(a,e),P()(a,[{key:"initCoords",value:function(){this.velocity=5,this.vectorY=0,this.y=this.app.renderer.height/2-this.height/2,this.tY=null,this.tvY=null}},{key:"calcVelocity",value:function(e){this.tY=e,this.vectorY=(e-this.object.y)/this.velocity}},{key:"tick",value:function(){this.object.y+=this.vectorY,this.tY&&(this.vectorY>0&&this.object.y>this.tY&&(this.vectorY=0),this.vectorY<0&&this.object.y<this.tY&&(this.vectorY=0))}}]),a}(function(){function e(a,t){var r=this;c()(this,e),this.x=t,this.game=a,this.app=a.app,this.graphics=new g.Graphics,this.width=15,this.height=60,this.initCoords(),this.draw(),this.app.ticker.add(function(){return r.tick()})}return P()(e,[{key:"initCoords",value:function(){this.y=this.app.renderer.height/2-this.height/2}},{key:"tick",value:function(){this.object.y=this.game.ball.object.y-this.height/2}},{key:"draw",value:function(){this.graphics.beginFill(161061273),this.graphics.drawRect(0,0,this.width,this.height),this.graphics.endFill(),this.object=new g.Sprite(this.graphics.generateCanvasTexture()),this.object.x=this.x,this.object.y=this.y-10,this.object.width=this.width,this.object.height=this.height,this.app.stage.addChild(this.object)}}]),e}()),v=function(){function e(a,t){c()(this,e),this.width=a,this.height=t,this.app=new g.Application({width:a,height:t}),this.b=new I,this.ball=new b(this),this.player_one=new O(this,this.app.renderer.width-30),this.player_two=new O(this,15)}return P()(e,[{key:"initView",value:function(e){e.append(this.app.renderer.view)}},{key:"iterate",value:function(){this.app.render(this.app.stage)}}]),e}(),_=t("Xxa5"),S=t.n(_),T=t("exGp"),w=t.n(T),k=t("RdOL");function V(e,a){var t=e-.5+Math.random()*(a-e+1);return 0===(t=Math.round(t))?V(e,a):t}var M=function(){function e(a,t,r,m){c()(this,e),this.agent_name=m,this.player=r,this.player.agent=this,this.targetCoordsLength=4,this.trainLoss=9999,this.randomTimeout=20,this.modelTimeout=30,this.app=t,this.game=a,this.targets=[],this.lables=[],this.target=[],this.predictionMode="random",this.tryLoadModel(),this.tryRestoreData(),this.label=null}return P()(e,[{key:"tryLoadModel",value:function(){var e=w()(S.a.mark(function e(){var a;return S.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,k.b("indexeddb://"+this.agent_name+"_model");case 2:a=e.sent,this.model=a;case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"trainData",value:function(){var e,a=this,t=(e=w()(S.a.mark(function e(){var a,t,m;return S.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:a=9999,t=0;case 2:if(!(t<200)){e.next=11;break}return e.next=5,r.fit(n,p);case 5:m=e.sent,console.log(t+1+"/200, Loss: "+m.history.loss[0]),a=m.history.loss[0];case 8:t++,e.next=2;break;case 11:return e.abrupt("return",a);case 12:case"end":return e.stop()}},e,this)})),function(){return e.apply(this,arguments)}),r=k.d();r.add(k.a.dense({units:this.targetCoordsLength,inputShape:[this.targetCoordsLength]})),r.add(k.a.dense({units:64,inputShape:[this.targetCoordsLength]})),r.add(k.a.dense({units:256,inputShape:[64]})),r.add(k.a.dense({units:1024,inputShape:[256]})),r.add(k.a.dense({units:1,inputShape:[1024]}));var m=k.g.adam(.001);r.compile({optimizer:m,loss:k.c.meanSquaredError}),console.log(this.targets,this.lables);var n=k.f(this.targets,[this.targets.length,this.targetCoordsLength]),p=k.e(this.lables);console.log("Start training"),t().then(function(e){a.model=r,a.model.save("indexeddb://"+a.agent_name+"_model"),a.trainLoss=e})}},{key:"tryRestoreData",value:function(){var e=window.localStorage.getItem(this.agent_name+"_lables");e&&(this.lables=JSON.parse(e));var a=window.localStorage.getItem(this.agent_name+"_targets");a&&(this.targets=JSON.parse(a))}},{key:"storeData",value:function(){window.localStorage.setItem(this.agent_name+"_lables",o()(this.lables)),window.localStorage.setItem(this.agent_name+"_targets",o()(this.targets))}},{key:"resetData",value:function(){this.targets=[],this.lables=[],window.localStorage.setItem(this.agent_name+"_lables",o()([])),window.localStorage.setItem(this.agent_name+"_targets",o()([])),this.storeData()}},{key:"clearState",value:function(){this.target=[],this.label=null}},{key:"onLose",value:function(){this.clearState(),this.game.ball.reset()}},{key:"onWin",value:function(){if(this.target.length===this.targetCoordsLength&&this.label){if("model"!==this.predictionMode){this.target.map(function(e){return Math.round(e)}),this.targets.push(this.target);var e=100*this.player.object.y/this.game.app.renderer.height/100;this.lables.push(Math.ceil(100*e)/100)}this.storeData(),this.clearState()}}},{key:"userPick",value:function(e){"user"===this.predictionMode&&(this.label=100*e/this.game.app.renderer.height/100,this.player.calcVelocity(e))}},{key:"pickY",value:function(e){var a=this.game.app.renderer.height*(100*e)/100;this.player.calcVelocity(a)}},{key:"tick",value:function(){var e=w()(S.a.mark(function e(){var a,t,r,m;return S.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(this.target.length<this.targetCoordsLength)){e.next=4;break}return this.target.push(this.game.ball.object.x),this.target.push(this.game.ball.object.y),e.abrupt("return",this.randomTimeout);case 4:if("model"===this.predictionMode&&(this.target.shift(),this.target.shift(),this.target.push(this.game.ball.object.x),this.target.push(this.game.ball.object.y)),"user"!==this.predictionMode){e.next=7;break}return e.abrupt("return",this.modelTimeout);case 7:if("model"!==this.predictionMode){e.next=22;break}if(!((a=JSON.parse(o()(this.target))).length<this.targetCoordsLength)){e.next=11;break}return e.abrupt("return",this.modelTimeout);case 11:return e.next=13,this.model.predict(k.f(a,[1,this.targetCoordsLength]));case 13:return t=e.sent,e.next=16,t.data();case 16:r=e.sent,this.label=Math.abs(r[0]),console.log("("+this.agent_name+") Model prediction: "+this.label),this.pickY(this.label),e.next=27;break;case 22:return m=V(1,this.game.app.renderer.height),this.label=100*m/this.game.app.renderer.height/100,console.log("("+this.agent_name+") Random prediction: "+this.label),this.pickY(this.label),e.abrupt("return",this.randomTimeout);case 27:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()}]),e}(),C={name:"GameField",data:function(){return{game:null,targetsTwo:[],lablesTwo:[],targetsOne:[],lablesOne:[],agentTwo:null,agentOne:null,predictionModeOne:"random",predictionModeTwo:"random"}},methods:{updatePredictionModeTwo:function(){this.agentTwo.predictionMode=this.predictionModeTwo},trainAgentTwo:function(){this.agentTwo.trainData()},resetDataTwo:function(){this.agentTwo.resetData()},updatePredictionModeOne:function(){this.agentOne.predictionMode=this.predictionModeOne},trainAgentOne:function(){this.agentOne.trainData()},resetDataOne:function(){this.agentOne.resetData()},drawGame:function(){this.game.iterate(),requestAnimationFrame(this.drawGame)},handlePlayerMove:function(e){this.agentOne.userPick(e.clientY),this.agentTwo.userPick(e.clientY)},initGame:function(){this.game=new v(900,500),this.game.initView(this.$refs.appField),this.agentTwo=new M(this.game,this,this.game.player_two,"agent_two"),this.agentOne=new M(this.game,this,this.game.player_one,"agent_one"),this.agentLoop()},agentLoop:function(){var e=this;this.agentOne.tick().then(function(a){e.targetsOne=JSON.parse(o()(e.agentOne.targets)).reverse(),e.lablesOne=JSON.parse(o()(e.agentOne.lables)).reverse(),setTimeout(function(){e.agentTwo.tick().then(function(a){e.targetsTwo=JSON.parse(o()(e.agentTwo.targets)).reverse(),e.lablesTwo=JSON.parse(o()(e.agentTwo.lables)).reverse(),setTimeout(function(){return e.agentLoop()},a)})},a)})},resetBall:function(){this.game.ball.reset()}},mounted:function(){this.initGame(),this.drawGame(),this.$refs.appField.onmousemove=this.handlePlayerMove}},j={render:function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",[t("div",{ref:"appField"}),e._v(" "),t("el-row",[t("el-col",{staticStyle:{"text-align":"left"},attrs:{span:11}},[t("el-row",[t("el-col",[t("el-radio-group",{attrs:{size:"mini"},on:{change:e.updatePredictionModeTwo},model:{value:e.predictionModeTwo,callback:function(a){e.predictionModeTwo=a},expression:"predictionModeTwo"}},[t("el-radio-button",{attrs:{label:"user"}},[e._v("User")]),e._v(" "),t("el-radio-button",{attrs:{label:"random"}},[e._v("Random")]),e._v(" "),t("el-radio-button",{attrs:{label:"model"}},[e._v("Model")])],1),e._v(" "),t("el-button",{attrs:{size:"mini",type:"success"},on:{click:e.trainAgentTwo}},[e._v("Train")]),e._v(" "),t("el-button",{attrs:{size:"mini",type:"danger"},on:{click:e.resetDataTwo}},[e._v("Reset data")])],1)],1),e._v(" "),t("el-row",[t("el-col",[t("br"),e._v("\n          Train data ("),t("span",{domProps:{textContent:e._s(e.targetsTwo.length)}}),e._v("):\n          "),t("br"),t("br"),e._v(" "),t("div",{staticClass:"targets-list"},e._l(e.targetsTwo,function(a,r){return t("span",{domProps:{textContent:e._s(JSON.stringify(a)+" "+JSON.stringify(e.lablesTwo[r]))}})}))])],1)],1),e._v(" "),t("el-col",{attrs:{span:2}},[t("el-button",{attrs:{type:"warning",size:"mini"},on:{click:e.resetBall}},[e._v("Reset ball")])],1),e._v(" "),t("el-col",{staticStyle:{"text-align":"right"},attrs:{span:11}},[t("el-row",[t("el-col",[t("el-button",{attrs:{size:"mini",type:"danger"},on:{click:e.resetDataOne}},[e._v("Reset data")]),e._v(" "),t("el-button",{attrs:{size:"mini",type:"success"},on:{click:e.trainAgentOne}},[e._v("Train")]),e._v(" "),t("el-radio-group",{attrs:{size:"mini"},on:{change:e.updatePredictionModeOne},model:{value:e.predictionModeOne,callback:function(a){e.predictionModeOne=a},expression:"predictionModeOne"}},[t("el-radio-button",{attrs:{label:"model"}},[e._v("Model")]),e._v(" "),t("el-radio-button",{attrs:{label:"random"}},[e._v("Random")]),e._v(" "),t("el-radio-button",{attrs:{label:"user"}},[e._v("User")])],1)],1)],1),e._v(" "),t("el-row",[t("el-col",[t("br"),e._v("\n          Train data ("),t("span",{domProps:{textContent:e._s(e.targetsOne.length)}}),e._v("):\n          "),t("br"),t("br"),e._v(" "),t("div",{staticClass:"targets-list"},e._l(e.targetsOne,function(a,r){return t("span",{domProps:{textContent:e._s(JSON.stringify(e.lablesOne[r])+" "+JSON.stringify(a))}})}))])],1)],1)],1),e._v(" "),t("br"),e._v("\n  Open console to see more info "),t("br"),e._v("\n  Github: "),t("a",{attrs:{href:"https://github.com/DmitryGulak/NeuralPong"}},[e._v("https://github.com/DmitryGulak/NeuralPong")]),e._v(" "),t("br")],1)},staticRenderFns:[]};var L=t("VU/8")(C,j,!1,function(e){t("1xb0")},"data-v-3aecc5de",null).exports;r.default.use(p.a);var Y=new p.a({routes:[{path:"/",name:"game-field",component:L}]}),D=t("zL8q"),z=t.n(D);t("tvR6");r.default.use(z.a),r.default.config.productionTip=!1,new r.default({el:"#app",router:Y,components:{App:n},template:"<App/>"})},NdBk:function(e,a){e.exports=[{tfOpName:"MatMul",dlOpName:"matMul",category:"matrices",params:[{tfInputIndex:0,dlParamName:"a",type:"tensor"},{tfInputIndex:1,dlParamName:"b",type:"tensor"},{tfParamName:"transpose_a",dlParamName:"transposeA",type:"bool",defaultValue:!1},{tfParamName:"transpose_b",dlParamName:"transposeB",type:"bool",defaultValue:!1},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",dlOpName:"transpose",category:"matrices",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"perm",dlParamName:"perm",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]}]},RdsD:function(e,a){e.exports=[{tfOpName:"AvgPool",dlOpName:"avgPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",dlOpName:"maxPool",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0},{tfParamName:"ksize",dlParamName:"kernelSize",type:"number[]"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",dlOpName:"conv1d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"stride",dlParamName:"stride",type:"number"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NWC"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"dilation",dlParamName:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",dlOpName:"conv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"T",dlParamName:"dtype",type:"dtype",notSupported:!0},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"useCudnnOnGpu",dlParamName:"useCudnnOnGpu",type:"bool"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"Conv2DBackpropInput",dlOpName:"conv2dTranspose",category:"convolution",params:[{tfInputIndex:2,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfInputIndex:0,dlParamName:"outputShape",type:"number[]"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",dlOpName:"depthwiseConv2d",category:"convolution",params:[{tfInputIndex:0,dlParamName:"input",type:"tensor"},{tfInputIndex:1,dlParamName:"filter",type:"tensor"},{tfParamName:"strides",dlParamName:"strides",type:"number[]"},{tfParamName:"padding",dlParamName:"pad",type:"string"},{tfParamName:"data_format",dlParamName:"dataFormat",type:"string",defaultValue:"NHWC"},{tfParamName:"dilations",dlParamName:"dilations",type:"number[]"}]}]},bNjZ:function(e,a){},bTAG:function(e,a){e.exports=[{tfOpName:"Max",dlOpName:"max",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Mean",dlOpName:"mean",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Min",dlOpName:"min",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"Sum",dlOpName:"sum",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number[]"},{tfParamName:"keep_dims",dlParamName:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",dlOpName:"argMax",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]},{tfOpName:"ArgMin",dlOpName:"argMin",category:"reduction",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,dlParamName:"axis",type:"number"}]}]},kqMq:function(e,a){e.exports=[{tfOpName:"PlaceholderWithDefault",dlOpName:"placeholder",category:"graph",params:[{tfInputIndex:0,dlParamName:"default",type:"tensor"}]},{tfOpName:"Placeholder",dlOpName:"placeholder",category:"graph"},{tfOpName:"Const",dlOpName:"const",category:"graph"},{tfOpName:"Identity",dlOpName:"identity",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Snapshot",dlOpName:"snapshot",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Shape",dlOpName:"shape",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"Print",dlOpName:"print",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfInputIndex:1,tfInputParamLength:1,dlParamName:"data",type:"tensors"},{tfParamName:"message",dlParamName:"message",type:"string"},{tfParamName:"first_n",dlParamName:"firstN",type:"number",notSupprted:!0},{tfParamName:"summarize",dlParamName:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",dlOpName:"noop",category:"graph",params:[]},{tfOpName:"StopGradient",dlOpName:"stopGradient",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",dlOpName:"fakeQuantWithMinMaxVars",category:"graph",params:[{tfInputIndex:0,dlParamName:"x",type:"tensor"},{tfParamName:"min",dlParamName:"min",type:"number"},{tfParamName:"max",dlParamName:"max",type:"number"}]}]},tvR6:function(e,a){}},["NHnr"]);
//# sourceMappingURL=app.db64784942b5517269bb.js.map